import telebot
from telebot import types
import sqlite3
import random
from datetime import datetime, timedelta

bot = telebot.TeleBot('?')

row = []


@bot.message_handler(commands=['start'])
def Start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ä–æ–∫–∞—Ö", )
    markup.row(btn1)
    btn2 = types.KeyboardButton("üìå –¶–µ–Ω—ã –∑–∞ —É—Ä–æ–∫")
    btn3 = types.KeyboardButton("‚úè –ó–∞–ø–∏—Å—å –Ω–∞ —É—Ä–æ–∫")
    markup.row(btn2, btn3)
    btn5 = types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ —É—Ä–æ–∫")
    btn6 = types.KeyboardButton("üë§ –î–ª—è –ê–¥–º–∏–Ω–∞")
    markup.row(btn5, btn6)
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!' + '\n' + "–†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å",
                     reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "üë§ –î–ª—è –ê–¥–º–∏–Ω–∞")
def admin_access(message):
    if message.from_user.username in ['Max1_6', 'nikit_000']:
        markup = types.InlineKeyboardMarkup()
        markup.row(types.InlineKeyboardButton("–í—ã–≤–æ–¥ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π", callback_data="Show"))
        markup.add(types.InlineKeyboardButton("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–¥", callback_data="Update"))
        markup.add(types.InlineKeyboardButton("–£—Ä–æ–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="Today"))
        markup.add(types.InlineKeyboardButton("–†–∞–Ω–¥–æ–º–Ω—ã–π –í–∫–∏–¥‚ùì", callback_data="Vkid"))
        bot.reply_to(message, "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=markup)

    else:
        bot.send_message(message.chat.id, "‚ùå–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤‚ùå")
        return


@bot.callback_query_handler(func=lambda call: call.data == "Vkid")
def rand_vkid(call):
    a = ["–ó–∞–∫–∏–Ω—É—Ç—å—Å—è!", "–ù–µ –∑–∞–∫–∏–¥—ã–≤–∞—Ç—å—Å—èüò•", "–ó–∞–∫–∏–Ω—É—Ç—å—Å—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç"]
    choice = random.choice(a)
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, f"üéâüéä–ú–æ–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—èüéäüéâ:\n\n{choice}")


@bot.callback_query_handler(func=lambda call: call.data == "Show")
def show_bd(call):
    connection = sqlite3.connect('Students.db')
    cursor = connection.cursor()
    cursor.execute('SELECT * FROM Users;')
    row = cursor.fetchall()
    for i in row:
        bot.answer_callback_query(call.id)
        bot.send_message(call.message.chat.id,
                         f"–ò–º—è: {i[1]}\n–§–∞–º–∏–ª–∏—è: {i[2]}\n–ö–ª–∞—Å—Å: {i[3]}\n–í–æ–∑—Ä–∞—Å—Ç: {i[4]}\n–¶–µ–ª—å: {i[5]}\n–Æ–∑–µ—Ä–Ω–µ–π–º:  @{i[6]}\n–î–∞—Ç–∞: {i[7]}")


@bot.callback_query_handler(func=lambda call: call.data == "Today")
def teach_today(call):
    bot.send_message(call.message.chat.id, "üîß –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")


@bot.callback_query_handler(func=lambda call: call.data == "Update")
def update(call):
    connection = sqlite3.connect('Students.db')
    cursor = connection.cursor()
    cursor.execute('SELECT * FROM Users;')
    row = cursor.fetchall()
    cursor.execute('DELETE FROM Users;')
    new_row = filter(lambda x: (datetime.now() - datetime.strptime(x[-1], '%Y-%m-%d %H:%M:%S') <= timedelta(days=7)),
                     row)
    for i in new_row:
        cursor.execute('INSERT INTO Users (name, surname, myclass, years, target, name_tg) VALUES (?, ?, ?, ?, ?, ?)',
                       (i[1], i[2], int(i[3]), int(i[4]), i[5], str(i[6])))
    connection.commit()
    connection.close()
    bot.send_message(call.message.chat.id, "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")


@bot.message_handler(func=lambda message: message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ —É—Ä–æ–∫")
def chancle(message):
    connection = sqlite3.connect('Students.db')
    cursor = connection.cursor()
    cursor.execute(F"SELECT name_tg  FROM Users")
    rows = iter(["".join(i) for i in cursor.fetchall()])
    if message.from_user.username in rows:
        cursor.execute(f"DELETE FROM Users WHERE name_tg = '{message.from_user.username}'")
        bot.send_message(message.chat.id, "–í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ —É—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞!")
    else:
        bot.send_message(message.chat.id, "–í—ã –µ—â–µ –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–ª–∏—Å—å –Ω–∞ —É—Ä–æ–∫!")
    connection.commit()
    connection.close()


@bot.message_handler(func=lambda message: message.text == "‚úè –ó–∞–ø–∏—Å—å –Ω–∞ —É—Ä–æ–∫")
def write_lesson(message):
    connection = sqlite3.connect('Students.db')
    cursor = connection.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS Users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name      VARCHAR(30),
        surname   VARCHAR(30),
        myclass     INTEGER,
        years     INTEGER,
        target    VARCHAR(300),
        name_tg   VARCHAR(100),
        mydatatime DATETIME DEFAULT CURRENT_TIMESTAMP
    )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS DateTime (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            student_id INTEGER,
            lesson_date DATE,
            lesson_time TIME,
            FOREIGN KEY (student_id) REFERENCES Users (id) ON DELETE CASCADE
        )
    ''')

    connection.commit()
    connection.close()

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è")
    bot.register_next_step_handler(message, process_name)


def process_name(message):
    user_name = message.text  # –¢—É—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∏–º—è –∏–∑ –ø—Ä–æ—à–ª–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    if user_name == "‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ä–æ–∫–∞—Ö":
        info_teach(message)
        return
    elif user_name == "üìå –¶–µ–Ω—ã –∑–∞ —É—Ä–æ–∫":
        price(message)
        return
    elif user_name == "‚úè –ó–∞–ø–∏—Å—å –Ω–∞ —É—Ä–æ–∫":
        write_lesson(message)
        return
    elif user_name == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ —É—Ä–æ–∫":
        chancle(message)
        return
    elif user_name == "üë§ –î–ª—è –ê–¥–º–∏–Ω–∞":
        pass
    row.append(user_name)
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    bot.register_next_step_handler(message, process_surname, user_name)


def process_surname(message, user_name):
    user_surname = message.text
    if user_surname == "‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ä–æ–∫–∞—Ö":
        info_teach(message)
        return
    elif user_surname == "üìå –¶–µ–Ω—ã –∑–∞ —É—Ä–æ–∫":
        price(message)
        return
    elif user_surname == "‚úè –ó–∞–ø–∏—Å—å –Ω–∞ —É—Ä–æ–∫":
        write_lesson(message)
        return
    elif user_surname == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ —É—Ä–æ–∫":
        chancle(message)
        return
    elif user_surname == "üë§ –î–ª—è –ê–¥–º–∏–Ω–∞":
        pass
    row.append(user_surname)
    bot.send_message(message.chat.id, "–í –∫–∞–∫–æ–º –≤—ã –∫–ª–∞—Å—Å–µ?")
    bot.register_next_step_handler(message, teach_class, user_name, user_surname)


def teach_class(message, user_name, user_surname):
    user_class = message.text
    if user_class == "‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ä–æ–∫–∞—Ö":
        info_teach(message)
        return
    elif user_class == "üìå –¶–µ–Ω—ã –∑–∞ —É—Ä–æ–∫":
        price(message)
        return
    elif user_class == "‚úè –ó–∞–ø–∏—Å—å –Ω–∞ —É—Ä–æ–∫":
        write_lesson(message)
        return
    elif user_class == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ —É—Ä–æ–∫":
        chancle(message)
        return
    elif user_class == "üë§ –î–ª—è –ê–¥–º–∏–Ω–∞":
        pass
    row.append(user_class)
    bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    bot.register_next_step_handler(message, how_old, teach_class, user_name, user_surname)


def how_old(message, user_name, user_surname, user_class):
    old = message.text
    if old == "‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ä–æ–∫–∞—Ö":
        info_teach(message)
        return
    elif old == "üìå –¶–µ–Ω—ã –∑–∞ —É—Ä–æ–∫":
        price(message)
        return
    elif old == "‚úè –ó–∞–ø–∏—Å—å –Ω–∞ —É—Ä–æ–∫":
        write_lesson(message)
        return
    elif old == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ —É—Ä–æ–∫":
        chancle(message)
        return
    elif old == "üë§ –î–ª—è –ê–¥–º–∏–Ω–∞":
        pass
    row.append(old)
    bot.send_message(message.chat.id, "–†–∞—Å–ø–∏—à–∏ —Ç–æ, –∫–∞–∫–∏–µ –Ω–æ–º–µ—Ä–∞ –∏–ª–∏ —Ç–µ–º—ã —Ç—ã —Ö–æ—Ç–µ–ª(–∞) –±—ã —Ä–∞–∑–æ–±—Ä–∞—Ç—å –Ω–∞ —É—Ä–æ–∫–µ:")
    bot.register_next_step_handler(message, targets, how_old, teach_class, user_name, user_surname)


def targets(message, user_name, user_surname, user_class, old):
    targ = message.text
    if targ == "‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ä–æ–∫–∞—Ö":
        info_teach(message)
        return
    elif targ == "üìå –¶–µ–Ω—ã –∑–∞ —É—Ä–æ–∫":
        price(message)
        return
    elif targ == "‚úè –ó–∞–ø–∏—Å—å –Ω–∞ —É—Ä–æ–∫":
        write_lesson(message)
        return
    elif targ == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ —É—Ä–æ–∫":
        chancle(message)
        return
    elif targ == "üë§ –î–ª—è –ê–¥–º–∏–Ω–∞":
        pass
    connection = sqlite3.connect('Students.db')
    cursor = connection.cursor()
    row.append(targ)
    a, b, c, d, e = row
    cursor.execute('INSERT INTO Users (name, surname, myclass, years, target, name_tg) VALUES (?, ?, ?, ?, ?, ?)',
                   (a, b, int(c), int(d), e, str(message.from_user.username)))
    connection.commit()
    connection.close()
    row.clear()
    bot.send_message(message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É—Ä–æ–∫!" + '\n' + "–ü–æ–∑–∂–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏")


@bot.message_handler(func=lambda message: message.text == "üìå –¶–µ–Ω—ã –∑–∞ —É—Ä–æ–∫")
def price(message):
    bot.send_message(message.chat.id, "–°—Ç–æ–∏–º–æ—Å—Ç—å:\n" \
                                      "‚ñ™Ô∏è–ï–ì–≠ (–ø—Ä–æ—Ñ–∏–ª—å–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞)\n" \
                                      "   1500—Ä - 1 —á–∞—Å (60 –º–∏–Ω)\n" \
                                      "   2000—Ä - 1,5 —á–∞—Å–∞ (90 –º–∏–Ω)\n" \
                                      "‚ñ™Ô∏è–û–ì–≠/–ï–ì–≠ (–±–∞–∑–æ–≤–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞)\n" \
                                      "   1200—Ä - 1 —á–∞—Å\n" \
                                      "   1600—Ä - 1,5 —á–∞—Å–∞\n\n" \
                                      "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –Ω–∞ –∫–∞—Ä—Ç—É –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n" \
                                      "–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:\n" \
                                      "1) –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–∫–∞\n" \
                                      "2) –Ω–∞ –Ω–µ–¥–µ–ª—é –≤–ø–µ—Ä–µ–¥\n" \
                                      "3) –Ω–∞ –º–µ—Å—è—Ü –≤–ø–µ—Ä–µ–¥")


@bot.message_handler(func=lambda message: message.text == "‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ä–æ–∫–∞—Ö")
def info_teach(message):
    bot.send_message(message.chat.id, "–ü—Ä–æ —É—Ä–æ–∫–∏:\n" \
                                      "‚ñ™Ô∏èDiscord (–¥–ª—è –∑–≤–æ–Ω–∫–æ–≤)\n" \
                                      "‚ñ™Ô∏è–û–Ω–ª–∞–π–Ω –¥–æ—Å–∫–∞  miro  (–¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏, —Ä–∏—Å–æ–≤–∞—Ç—å)\n" \
                                      "‚ñ™Ô∏è–¢–µ–ª–µ–≥—Ä–∞–º (–¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —Ç–∞–∫–∏—Ö –∫–∞–∫ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á, –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —É—Ä–æ–∫–æ–≤ –∏ —Ç.–¥.)\n\n" \
                                      "–ù–∞—á–∞–ª–æ —É—Ä–æ–∫–∞:\n" \
                                      "–í –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Å–æ–∑–≤–∞–Ω–∏–≤–∞–µ–º—Å—è –ø–æ –¥–∏—Å–∫–æ—Ä–¥—É, —è –∫–∏–¥–∞—é —Å—Å—ã–ª–∫—É –Ω–∞ –¥–æ—Å–∫—É –≤ —á–∞—Ç, –ª–∏–±–æ –º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –æ–¥–Ω–æ–π –∏ —Ç–æ–π –∂–µ –¥–æ—Å–∫–æ–π –ø–æ—Å—Ç–æ—è–Ω–Ω–æ.\n" \
                                      "–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å —É—Ä–æ–∫–∞:\n" \
                                      "–£—Ä–æ–∫–∏ –±—ã–≤–∞—é—Ç —Ä–∞–∑–Ω–æ–≥–æ –≤–∏–¥–∞\n" \
                                      "‚ñ™Ô∏è–ù–æ–≤–∞—è —Ç–µ–æ—Ä–∏—è + –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –Ω–µ–π\n" \
                                      "‚ñ™Ô∏è–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ, –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –Ω—É–∂–Ω—ã—Ö –¥–ª—è –ï–ì–≠ —Ç–µ–æ—Ä–µ–º\n" \
                                      "‚ñ™Ô∏è–†–∞–∑–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ –ø—Ä–æ—Å—å–±–µ —É—á–µ–Ω–∏–∫–∞\n" \
                                      "‚ñ™Ô∏è–°—É–≥—É–±–æ –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ —Ä–µ—à–µ–Ω–∏—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á, –Ω–∞–ø—Ä–∏–º–µ—Ä –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Ä–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ—à–∞—é—â–∏–µ—Å—è —á–µ—Ä–µ–∑ —Ö–û–∞, –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–µ–æ—Ä–µ–º —Å –ø–æ–ø—É—Ç–Ω—ã–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –ø—Ä–∏–º–µ–Ω—è–µ–º—ã—Ö –≤ —Ä–µ—à–µ–Ω–∏–∏ —Ñ–∞–∫—Ç–æ–≤.\n" \
                                      "‚ñ™Ô∏è–∏ –¥—Ä—É–≥–∏–µ \n\n" \
                                      "–ö–æ–Ω–µ—Ü —É—Ä–æ–∫–∞:\n" \
                                      "‚ñ™Ô∏è–ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏\n" \
                                      "‚ñ™Ô∏è–û–±—Å—É–∂–¥–∞–µ–º —Ç–æ, —á—Ç–æ –≤—ã–∑–≤–∞–ª–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏\n" \
                                      "‚ñ™Ô∏è–Ø —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—é, —á–µ–º –±—É–¥–µ–º –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–∫–µ.")


@bot.message_handler(content_types=['photo'])
def answer(message):
    bot.reply_to(message, "–ë–æ—Ç –Ω–µ —É–º–µ–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å —Ñ–æ—Ç–æ!")


@bot.message_handler()
def info(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–µ–Ω–∞ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")


bot.polling(none_stop=True)


